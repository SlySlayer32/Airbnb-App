# üéØ Cursor AI Development Rules
## üìö PRIMARY SOURCE: CURSOR_ROADMAP.md

**‚ö†Ô∏è READ FIRST**: This file is a quick reference. For complete guidance, READ:
‚Üí **`CURSOR_ROADMAP.md`** - Single source of truth for all AI behavior

---

## üö® MANDATORY STARTUP SEQUENCE (30 seconds)

**At the start of EVERY new conversation:**
1. ‚úÖ READ: `CURSOR_ROADMAP.md` (complete AI guidance)
2. ‚úÖ READ: `docs/08-ai-context/ai-README.md` (project overview)
3. ‚úÖ READ: `docs/07-project-management/phase-status.md` (current priorities)
4. ‚úÖ SCAN: `docs/04-codebase/` (existing components, services, types)

**Skipping this will result in:**
- ‚ùå Duplicate features
- ‚ùå Broken business rules
- ‚ùå Hours of rework

---

## üìñ What This App Does

A mobile-first Airbnb property cleaning management platform connecting property owners with cleaning teams. Coordinates turnovers in the critical 4-hour window (11 AM - 3 PM) between guest checkout and checkin.

**Users:**
- **Property Owners**: Manage properties, schedule cleanings, view reports, handle billing
- **Cleaners**: View jobs, track time, upload photos, report issues (NO financial access)
- **Co-Hosts**: Limited property coordination access

---

## üèõÔ∏è The 5 Critical Business Rules (ALWAYS Enforce)

**See `CURSOR_ROADMAP.md` for complete details. Quick reference:**

1. **Cleaning Window**: 11 AM - 3 PM only (validate with `hour >= 11 && hour < 15`)
2. **Cancellation Notice**: 24-hour notice required (< 24 hrs = RED warning)
3. **Financial Privacy**: Cleaners NEVER see rates, invoices, payments (use RoleBasedWrapper)
4. **Photo Proof**: 3 minimum photos required (kitchen, bathroom, living area)
5. **Linen Auto-Calculation**: Based on guest count (no manual entry)

---

## üîë Quick Production-Grade Checklist

**Before providing ANY code:**
- [ ] All TypeScript types defined (NO 'any')
- [ ] All async operations in try/catch
- [ ] Loading, error, empty, success states handled
- [ ] Business rules enforced
- [ ] Role-based access control applied
- [ ] Mobile responsive (works iOS/Android)
- [ ] No TODOs or console.logs
- [ ] Complete implementation (not partial)

---

## üìñ Copyright-Safe Documentation Only

**ONLY reference these approved sources:**
- ‚úÖ React Native Docs (https://reactnative.dev/docs)
- ‚úÖ Expo Docs (https://docs.expo.dev/)
- ‚úÖ TypeScript Docs (https://www.typescriptlang.org/docs/)
- ‚úÖ Supabase Docs (https://supabase.com/docs)
- ‚úÖ MDN Web Docs (https://developer.mozilla.org/)
- ‚úÖ This project's docs (`/docs/**/*.md`)

**NEVER reference:**
- ‚ùå Stack Overflow
- ‚ùå Blog posts (unless CC-licensed)
- ‚ùå Proprietary/paywalled content
- ‚ùå Copyrighted tutorials or books

---

## üß† Handling Vague Input

**When request is unclear, use the 5-Question Method:**
1. **Who?** Which user role (owner/cleaner/co_host)?
2. **What problem?** What business need does this solve?
3. **Where?** Which screen/component?
4. **Edge cases?** What if no data, network fails, no permissions?
5. **Which rules?** Which of the 5 critical rules apply?

**Confidence Levels:**
- **High (80%+)**: Proceed with implementation, note assumptions
- **Medium (50-80%)**: Clarify 1-2 key points
- **Low (<50%)**: Ask all 5 questions

See `CURSOR_ROADMAP.md` section "Vague Input Interpretation Framework" for complete guidance.

---

## üèóÔ∏è Tech Stack (Established - Don't Change)

- Frontend: React Native + Expo SDK 54 (iOS, Android, Web)
- Backend: Supabase (PostgreSQL + Auth + Realtime + Storage)
- Language: TypeScript strict mode (NO 'any' types)
- Navigation: Expo Router (file-based routing)
- Styling: React Native StyleSheet only
- Icons: @expo/vector-icons (Ionicons only)
- State: React Context for auth, useState for UI

**See `CURSOR_ROADMAP.md` for complete architecture details.**

---

## üìÅ Project Structure (Quick Reference)

```
/app/           ‚Üí 13 screens (Expo Router)
/components/    ‚Üí 18 reusable UI components
/services/      ‚Üí 8 business logic services
/types/         ‚Üí All TypeScript definitions
/docs/          ‚Üí 80+ documentation files
```

**See `docs/04-codebase/` for complete manifests.**

---

## üé® Design System (Use Exactly)

**Colors:**
```typescript
primary: '#007AFF', success: '#10b981', warning: '#f59e0b', error: '#ef4444'
textPrimary: '#1f2937', textSecondary: '#6b7280', background: '#f9fafb'
```

**Spacing:** `xs:4, sm:8, md:12, lg:16, xl:24, xxl:32`
**Border Radius:** `small:6, medium:8, large:12, round:999`

---

## üìù Code Templates

**See `CURSOR_ROADMAP.md` for complete component, service, and screen templates.**

**Quick Component Pattern:**
```typescript
import React, { useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import { SomeType } from '@/types';
import { someService } from '@/services';

interface Props {
  data: SomeType;
  onAction: (id: string) => void;
  loading?: boolean;
}

export default function ComponentName({ data, onAction, loading = false }: Props) {
  const [localLoading, setLocalLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleAction = async () => {
    try {
      setLocalLoading(true);
      setError(null);
      await someService.doSomething(data.id);
      Alert.alert('Success', 'Action completed');
      onAction(data.id);
    } catch (error) {
      setError('Something went wrong. Please try again.');
      Alert.alert('Error', 'User-friendly message');
    } finally {
      setLocalLoading(false);
    }
  };

  return (
    <TouchableOpacity style={styles.container} onPress={handleAction}>
      {/* Component content */}
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
});
```

---

## ‚úÖ Quality Checklist (Before Completion)

**Every implementation must have:**
- [ ] TypeScript (no 'any' types)
- [ ] Loading state (spinner during async)
- [ ] Error state (user-friendly message)
- [ ] Empty state (when no data)
- [ ] Try/catch on all service calls
- [ ] Business rules enforced
- [ ] Mobile responsive
- [ ] Follows existing patterns
- [ ] No TODOs or console.logs

---

## üéì Response Structure

**Always structure responses as:**

1. **Confirming**: "We're building [feature] so that [role] can [action]"
2. **Architecture Check**: "This integrates with: [features]. Potential issues: [risks]"
3. **Complete Code**: [Full working implementation]
4. **Testing Steps**: "To verify: [step 1], [step 2], [expected result]"
5. **Next Step**: "The logical next step is: [specific feature] because [reason]"

---

## üìö Essential Documentation References

**Start here every time:**
- `CURSOR_ROADMAP.md` - THIS FILE ‚Üí Single source of truth
- `docs/08-ai-context/ai-README.md` - 30-second overview
- `docs/07-project-management/phase-status.md` - Current priorities
- `docs/core/BUSINESS_RULES.md` - The 5 critical rules (detailed)
- `docs/04-codebase/COMPONENTS.md` - All 18 components
- `docs/04-codebase/SERVICES.md` - All 8 services
- `docs/reference/API_PATTERNS.md` - Code patterns
- `docs/reference/TROUBLESHOOTING.md` - Common issues

---

## üö® Never Do This

- ‚ùå Use 'any' type
- ‚ùå Call Supabase directly from components (use services)
- ‚ùå Skip error handling
- ‚ùå Create incomplete features
- ‚ùå Ignore business rules
- ‚ùå Reference Stack Overflow or non-approved docs
- ‚ùå Provide partial implementations with TODOs

---

## üéØ Success Metrics

**You're doing it right when:**
- ‚úÖ Code works immediately without debugging
- ‚úÖ TypeScript compiles with zero errors
- ‚úÖ All business rules enforced correctly
- ‚úÖ User doesn't say "that already exists"
- ‚úÖ Features solve real business problems
- ‚úÖ No copyright concerns from documentation
- ‚úÖ Vague requests become clear specs quickly

---

## üìñ For Complete Guidance

**‚Üí READ: `CURSOR_ROADMAP.md`**

This file contains:
- Complete vague input interpretation framework
- Production-grade code standards (detailed)
- Copyright-safe documentation guidelines
- All code templates (component, service, screen)
- Business rules (comprehensive)
- Quality assurance checklist (complete)
- Examples: vague ‚Üí production transformations

**Time to read**: 10-15 minutes  
**Quality improvement**: 10x  
**Rework eliminated**: Hours to days

---

**Last Updated**: October 17, 2025  
**Version**: 2.0 (Consolidated with CURSOR_ROADMAP.md)
