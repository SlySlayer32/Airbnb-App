{
	"version": "2.0.0",
	"tasks": [
		// =================================================================================
		// == Primary Development Tasks
		// =================================================================================
		{
			"label": "Dev: Start Server",
			"type": "shell",
			"command": "npm start",
			"detail": "Starts the Expo development server. This is the primary task for development.",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*",
					"endsPattern": "^.*Expo.*|^.*Metro.*waiting.*|^.*Bundling complete.*"
				}
			}
		},
		{
			"label": "Dev: Run on Android",
			"type": "shell",
			"command": "npm run android",
			"detail": "Builds and runs the app on a connected Android device or emulator.",
			"group": "build",
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*|^.*Building.*",
					"endsPattern": "^.*Bundling complete.*|^.*Metro.*waiting.*|^.*Successfully built.*|^.*APK.*installed.*"
				}
			}
		},
		{
			"label": "Dev: Run on iOS",
			"type": "shell",
			"command": "npm run ios",
			"detail": "Builds and runs the app on an iOS simulator or connected device.",
			"group": "build",
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*|^.*Building.*",
					"endsPattern": "^.*Bundling complete.*|^.*Metro.*waiting.*|^.*Build succeeded.*"
				}
			}
		},
		{
			"label": "Dev: Run on Web",
			"type": "shell",
			"command": "npm run web",
			"detail": "Runs the app in a web browser.",
			"group": "build",
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*",
					"endsPattern": "^.*Compiled successfully.*|^.*webpack.*compiled.*"
				}
			}
		},
		// =================================================================================
		// == Code Quality & Verification
		// =================================================================================
		{
			"label": "Verify: Typecheck",
			"type": "shell",
			"command": "npx tsc --noEmit",
			"detail": "Runs TypeScript compiler to check for type errors.",
			"group": "test",
			"presentation": {
				"reveal": "always"
			},
			"problemMatcher": [
				"$tsc"
			]
		},
		{
			"label": "Verify: Lint",
			"type": "shell",
			"command": "npx eslint .",
			"detail": "Runs ESLint to check for code style and quality issues.",
			"group": "test",
			"presentation": {
				"reveal": "always"
			},
			"problemMatcher": [
				"$eslint-stylish"
			]
		},
		{
			"label": "Verify: All Checks",
			"detail": "Runs all code quality checks: type checking and linting.",
			"dependsOn": [
				"Verify: Typecheck",
				"Verify: Lint"
			],
			"dependsOrder": "sequence",
			"group": "test",
			"presentation": {
				"reveal": "always"
			}
		},
		// =================================================================================
		// == Project Maintenance
		// =================================================================================
		{
			"label": "Maint: Install Dependencies",
			"type": "shell",
			"command": "npm install",
			"detail": "Installs or updates project dependencies from package.json.",
			"presentation": {
				"reveal": "always"
			},
			"problemMatcher": []
		},
		{
			"label": "Maint: Clear Expo Cache",
			"type": "shell",
			"command": "expo start -c",
			"detail": "Clears the Expo bundler cache. Use this if you have caching issues.",
			"presentation": {
				"reveal": "always"
			}
		},
		{
			"label": "Maint: Clean & Reinstall",
			"type": "shell",
			"command": "powershell -Command \"Remove-Item -Recurse -Force node_modules, package-lock.json -ErrorAction SilentlyContinue; npm install; expo start -c\"",
			"detail": "Deletes node_modules, package-lock.json, reinstalls dependencies, and clears Expo cache. A full reset.",
			"presentation": {
				"reveal": "always"
			},
			"problemMatcher": []
		},
		// =================================================================================
		// == Git Workflow
		// =================================================================================
		{
			"label": "Git: Fetch",
			"type": "shell",
			"command": "git fetch origin",
			"detail": "Fetches the latest changes from the remote repository.",
			"presentation": {
				"reveal": "silent"
			},
			"problemMatcher": []
		},
		{
			"label": "Git: Pull (rebase)",
			"type": "shell",
			"command": "git pull --rebase origin ${input:branch}",
			"detail": "Pulls latest changes and reapplies your commits on top.",
			"presentation": {
				"reveal": "silent"
			},
			"problemMatcher": []
		},
		{
			"label": "Git: Stash WIP",
			"type": "shell",
			"command": "git",
			"args": [
				"stash",
				"push",
				"-m",
				"WIP from VS Code task"
			],
			"detail": "Stashes your current work-in-progress changes.",
			"presentation": {
				"reveal": "silent"
			},
			"problemMatcher": []
		},
		{
			"label": "Git: Sync & Verify",
			"detail": "Stashes changes, pulls from remote, reinstalls, and runs checks.",
			"dependsOn": [
				"Git: Stash WIP",
				"Git: Fetch",
				"Git: Pull (rebase)",
				"Maint: Install Dependencies",
				"Verify: All Checks"
			],
			"dependsOrder": "sequence"
		}
	],
	"inputs": [
		{
			"id": "branch",
			"type": "promptString",
			"description": "Enter the branch name to pull from",
			"default": "main"
		}
	]
}
