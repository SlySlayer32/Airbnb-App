{
	"version": "2.0.0",
	"tasks": [
		// =================================================================================
		// == üöÄ MASTER TASKS - One-Click Development
		// =================================================================================
		{
			"label": "üî• Master Clear & Fresh Start",
			"detail": "NUCLEAR OPTION: Clears everything and starts completely fresh. Use after major changes or when things break.",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üî• Master Clear: Starting nuclear cleanup...' -ForegroundColor Yellow; Write-Host ''; Write-Host '1Ô∏è‚É£ Stopping all Node/Expo processes...' -ForegroundColor Cyan; Stop-Process -Name 'node','expo' -Force -ErrorAction SilentlyContinue; Start-Sleep -Seconds 2; Write-Host '‚úÖ Processes stopped' -ForegroundColor Green; Write-Host ''; Write-Host '2Ô∏è‚É£ Deleting cache folders...' -ForegroundColor Cyan; Remove-Item -Recurse -Force '.expo','.metro','node_modules/.cache' -ErrorAction SilentlyContinue; Write-Host '‚úÖ Cache folders deleted' -ForegroundColor Green; Write-Host ''; Write-Host '3Ô∏è‚É£ Deleting node_modules and package-lock.json...' -ForegroundColor Cyan; Remove-Item -Recurse -Force 'node_modules','package-lock.json' -ErrorAction SilentlyContinue; Write-Host '‚úÖ node_modules removed' -ForegroundColor Green; Write-Host ''; Write-Host '4Ô∏è‚É£ Reinstalling dependencies...' -ForegroundColor Cyan; npm install; Write-Host '‚úÖ Dependencies installed' -ForegroundColor Green; Write-Host ''; Write-Host '5Ô∏è‚É£ Starting Expo with cleared cache...' -ForegroundColor Cyan; npx expo start --clear; Write-Host '‚úÖ Expo started fresh!' -ForegroundColor Green"
			],
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true,
				"focus": true
			},
			"problemMatcher": [],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
			"label": "‚ö° Quick Clear & Restart",
			"detail": "Fast cache clear without reinstalling node_modules. Use after code changes.",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '‚ö° Quick Clear: Starting fast cleanup...' -ForegroundColor Yellow; Write-Host ''; Stop-Process -Name 'node','expo' -Force -ErrorAction SilentlyContinue; Start-Sleep -Seconds 1; Write-Host '‚úÖ Processes stopped' -ForegroundColor Green; Remove-Item -Recurse -Force '.expo','.metro' -ErrorAction SilentlyContinue; Write-Host '‚úÖ Cache cleared' -ForegroundColor Green; Write-Host ''; Write-Host 'Starting Expo with cleared cache...' -ForegroundColor Cyan; npx expo start --clear"
			],
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true,
				"focus": true
			},
			"problemMatcher": [],
			"group": "build"
		},
		{
			"label": "üéØ Start Fresh (Verified Setup)",
			"detail": "Ensures correct directory, environment loaded, then starts with clear cache. Use daily.",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üéØ Starting Fresh Setup Check...' -ForegroundColor Yellow; Write-Host ''; Write-Host 'Current Directory: ' -NoNewline; Write-Host (Get-Location) -ForegroundColor Cyan; Write-Host ''; if (Test-Path '.env.local') { Write-Host '‚úÖ .env.local found' -ForegroundColor Green } else { Write-Host '‚ùå .env.local missing!' -ForegroundColor Red }; Write-Host ''; Stop-Process -Name 'node','expo' -Force -ErrorAction SilentlyContinue; Start-Sleep -Seconds 1; Remove-Item -Recurse -Force '.expo' -ErrorAction SilentlyContinue; Write-Host '‚úÖ Cache cleared' -ForegroundColor Green; Write-Host ''; Write-Host 'Starting Expo...' -ForegroundColor Cyan; npx expo start --clear"
			],
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true,
				"focus": true
			},
			"problemMatcher": [],
			"group": "build"
		},
		// =================================================================================
		// == üîß Development Servers
		// =================================================================================
		{
			"label": "Dev: Start Server",
			"type": "shell",
			"command": "npx expo start",
			"detail": "Starts the Expo development server normally.",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*",
					"endsPattern": "^.*Metro.*waiting.*|^.*Bundling complete.*"
				}
			}
		},
		{
			"label": "Dev: Start with Clear Cache",
			"type": "shell",
			"command": "npx expo start --clear",
			"detail": "Starts Expo with cleared bundler cache.",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*",
					"endsPattern": "^.*Metro.*waiting.*|^.*Bundling complete.*"
				}
			}
		},
		{
			"label": "Dev: Run on Android",
			"type": "shell",
			"command": "npm run android",
			"detail": "Builds and runs the app on Android device or emulator.",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*|^.*Building.*",
					"endsPattern": "^.*Bundling complete.*|^.*Metro.*waiting.*"
				}
			}
		},
		{
			"label": "Dev: Run on iOS",
			"type": "shell",
			"command": "npm run ios",
			"detail": "Builds and runs the app on iOS simulator or device.",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*|^.*Building.*",
					"endsPattern": "^.*Bundling complete.*|^.*Metro.*waiting.*"
				}
			}
		},
		{
			"label": "Dev: Run on Web",
			"type": "shell",
			"command": "npm run web",
			"detail": "Runs the app in a web browser.",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"isBackground": true,
			"problemMatcher": {
				"pattern": [
					{
						"regexp": ".",
						"file": 1,
						"location": 2,
						"message": 3
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*Starting.*",
					"endsPattern": "^.*Compiled successfully.*|^.*webpack.*compiled.*"
				}
			}
		},
		// =================================================================================
		// == ‚úÖ Code Quality & Verification
		// =================================================================================
		{
			"label": "Verify: TypeScript Check",
			"type": "shell",
			"command": "npx tsc --noEmit",
			"detail": "Runs TypeScript compiler to check for type errors.",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true
			},
			"problemMatcher": [
				"$tsc"
			]
		},
		{
			"label": "Verify: Lint",
			"type": "shell",
			"command": "npm run lint",
			"detail": "Runs ESLint to check for code style and quality issues.",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": [
				"$eslint-stylish"
			]
		},
		{
			"label": "Verify: All Checks",
			"detail": "Runs all code quality checks: TypeScript and linting.",
			"dependsOn": [
				"Verify: TypeScript Check",
				"Verify: Lint"
			],
			"dependsOrder": "sequence",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "Verify: Environment Setup",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üîç Verifying Environment Setup...' -ForegroundColor Yellow; Write-Host ''; Write-Host 'üìÇ Current Directory:' -ForegroundColor Cyan; Write-Host (Get-Location); Write-Host ''; Write-Host 'üìÑ Checking .env.local...' -ForegroundColor Cyan; if (Test-Path '.env.local') { Write-Host '‚úÖ .env.local exists' -ForegroundColor Green; $envContent = Get-Content '.env.local' -Raw; if ($envContent -match 'qvvfjxjwuucmkjrvaqxf') { Write-Host '‚úÖ Supabase URL configured' -ForegroundColor Green } else { Write-Host '‚ùå Supabase URL missing or invalid' -ForegroundColor Red } } else { Write-Host '‚ùå .env.local not found!' -ForegroundColor Red }; Write-Host ''; Write-Host 'üì¶ Checking node_modules...' -ForegroundColor Cyan; if (Test-Path 'node_modules') { Write-Host '‚úÖ node_modules exists' -ForegroundColor Green } else { Write-Host '‚ùå node_modules not found - run npm install' -ForegroundColor Red }; Write-Host ''; Write-Host 'üì± Checking Expo processes...' -ForegroundColor Cyan; $expoProcesses = Get-Process -Name 'node','expo' -ErrorAction SilentlyContinue; if ($expoProcesses) { Write-Host '‚ö†Ô∏è Expo/Node processes running (' $expoProcesses.Count ')' -ForegroundColor Yellow } else { Write-Host '‚úÖ No processes running' -ForegroundColor Green }"
			],
			"detail": "Verifies directory, .env.local, node_modules, and running processes.",
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true
			},
			"problemMatcher": []
		},
		// =================================================================================
		// == üóÑÔ∏è Database & Supabase
		// =================================================================================
		{
			"label": "DB: Check Supabase Connection",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üóÑÔ∏è Checking Supabase Configuration...' -ForegroundColor Yellow; Write-Host ''; if (Test-Path '.env.local') { $env = Get-Content '.env.local' | Select-String 'EXPO_PUBLIC_SUPABASE_URL'; if ($env) { Write-Host 'Supabase URL: ' -NoNewline; Write-Host ($env -replace 'EXPO_PUBLIC_SUPABASE_URL=','') -ForegroundColor Cyan; Write-Host '‚úÖ Configuration found' -ForegroundColor Green } else { Write-Host '‚ùå EXPO_PUBLIC_SUPABASE_URL not found in .env.local' -ForegroundColor Red } } else { Write-Host '‚ùå .env.local file not found!' -ForegroundColor Red }; Write-Host ''; Write-Host 'üìä Database Tables Expected:' -ForegroundColor Cyan; Write-Host '  - profiles'; Write-Host '  - properties'; Write-Host '  - cleaning_sessions'; Write-Host '  - cleaning_updates'; Write-Host '  - team_members'; Write-Host '  - notifications'; Write-Host '  - photo_proof_requirements'; Write-Host '  - linen_requirements'; Write-Host ''; Write-Host 'Use Supabase Dashboard to verify: https://app.supabase.com' -ForegroundColor Yellow"
			],
			"detail": "Displays Supabase configuration and expected database tables.",
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true
			},
			"problemMatcher": []
		},
		// =================================================================================
		// == üßπ Maintenance & Cleanup
		// =================================================================================
		{
			"label": "Maint: Install Dependencies",
			"type": "shell",
			"command": "npm install",
			"detail": "Installs or updates project dependencies from package.json.",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "Maint: Clear Expo Cache Only",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Remove-Item -Recurse -Force '.expo' -ErrorAction SilentlyContinue; Write-Host '‚úÖ .expo cache cleared' -ForegroundColor Green"
			],
			"detail": "Clears only the .expo folder.",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "Maint: Clear Metro Cache Only",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Remove-Item -Recurse -Force '.metro','node_modules/.cache' -ErrorAction SilentlyContinue; Write-Host '‚úÖ Metro cache cleared' -ForegroundColor Green"
			],
			"detail": "Clears only Metro bundler cache.",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "Maint: Stop All Processes",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Stop-Process -Name 'node','expo' -Force -ErrorAction SilentlyContinue; Write-Host '‚úÖ All Node/Expo processes stopped' -ForegroundColor Green"
			],
			"detail": "Stops all running Node and Expo processes.",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "Maint: Clean & Reinstall",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üßπ Full Clean & Reinstall...' -ForegroundColor Yellow; Remove-Item -Recurse -Force 'node_modules','package-lock.json' -ErrorAction SilentlyContinue; Write-Host '‚úÖ Cleaned' -ForegroundColor Green; Write-Host 'Installing dependencies...' -ForegroundColor Cyan; npm install"
			],
			"detail": "Deletes node_modules and package-lock.json, then reinstalls everything.",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": []
		},
		// =================================================================================
		// == üìÑ Documentation
		// =================================================================================
		{
			"label": "Docs: Open Testing Guide",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (Test-Path 'SEED_DATA_SUMMARY.md') { code 'SEED_DATA_SUMMARY.md' } else { Write-Host '‚ùå SEED_DATA_SUMMARY.md not found' -ForegroundColor Red }"
			],
			"detail": "Opens the seed data and testing documentation.",
			"presentation": {
				"reveal": "silent"
			},
			"problemMatcher": []
		},
		{
			"label": "Docs: Update Manifests",
			"type": "shell",
			"command": "npm run docs:update",
			"detail": "Updates component, service, and screen manifests in docs/ folder.",
			"presentation": {
				"reveal": "always",
				"panel": "shared"
			},
			"problemMatcher": []
		}
	]
}
