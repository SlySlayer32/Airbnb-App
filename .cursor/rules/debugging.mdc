---
description: Common issues and debugging guidance
globs: ["**/*test*", "**/*debug*", "**/*error*", "**/*Test*", "**/*Debug*", "**/*Error*"]
alwaysApply: false
---

# Testing & Debugging Guidelines

## Common Issues & Solutions

### "Cannot read property of undefined"

**Cause**: Accessing nested properties without checking existence
**Solution**: Use optional chaining

```tsx
// Problem: user.profile.name
// Solution: user?.profile?.name
```

### "Permission denied" from Supabase

**Cause**: Row Level Security blocking the query because role/team membership missing
**Solution**: Confirm the authenticated user has a matching `team_members` entry and service is filtering by `profile.role`

```typescript
// Quick diagnostic
const { data: profile } = await supabase.from('profiles').select('id, role').eq('id', user.id).single();
console.log('Role', profile?.role);
```

### "Network request failed"

**Cause**: Supabase connection issues
**Solution**: Check environment variables and network

```tsx
console.log('Supabase URL:', supabase.supabaseUrl);
console.log('Supabase Key exists:', !!supabase.supabaseKey);
```

### Expo build keeps restarting

**Cause**: Runtime exception or fast refresh loop from state mutation
**Solution**: Check Metro logs, ensure state updates are immutable, and verify there are no unhandled promise rejections

### "Invalid hook call"

**Cause**: Using React hooks inside callbacks or conditionals
**Solution**: Only call hooks at component top level

```tsx
// Problem: if (condition) { const [state] = useState(false); }
// Solution: const [state] = useState(false); if (condition) { /* use state */ }
```

### White screen on app start

**Cause**: Navigation or authentication issues
**Solution**: Check AuthGuard logic in _layout.tsx

## Debug Steps for Non-Technical Users

1. Look at error message in terminal - often tells you exactly what's wrong
2. Check if similar working code exists in the project
3. Verify all imports are present at top of files
4. Ensure types match between components (props interfaces)
5. Test with mock data first before connecting to real Supabase
6. Re-run `npm run lint` to catch forgotten imports or unused variables

## Error Handling Checklist

- [ ] All async operations wrapped in try/catch
- [ ] User-friendly error messages (no technical jargon)
- [ ] Loading states shown during operations
- [ ] Network errors handled gracefully
- [ ] Fallback UI for error states
- [ ] Console errors logged for debugging
- [ ] Add context to errors you rethrow (`throw new Error('Property fetch failed: ' + error.message)`)

## Debugging Tools

### Console Logging
```typescript
// Use structured logging
console.log('üîç Debug Info:', {
  userId: user?.id,
  propertyId: property?.id,
  action: 'createSession',
  timestamp: new Date().toISOString()
});
```

### Run Targeted Checks
```bash
# Type check only
npx tsc --noEmit

# Lint components file
npm run lint -- components/CleanerPropertyCard.tsx
```

### Error Boundaries
```tsx
// Wrap components in error boundaries
<ErrorBoundary fallback={<ErrorFallback />}>
  <ComponentThatMightFail />
</ErrorBoundary>
```

### Network Debugging
```typescript
// Check Supabase connection
const testConnection = async () => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (error) throw error;
    console.log('‚úÖ Supabase connection working');
  } catch (error) {
    console.error('‚ùå Supabase connection failed:', error);
  }
};
```

## Performance Debugging

### React DevTools
- Use React DevTools Profiler to identify re-renders
- Check component render counts
- Identify expensive operations

### Memory Leaks
```typescript
// Clean up subscriptions
useEffect(() => {
  const subscription = supabase
    .channel('updates')
    .on('postgres_changes', { event: '*', schema: 'public', table: 'sessions' }, handleUpdate)
    .subscribe();

  return () => {
    supabase.removeChannel(subscription);
  };
}, []);
```

### Offline/Retry Strategy
```typescript
const withRetry = async <T>(operation: () => Promise<T>, retries = 2): Promise<T> => {
  try {
    return await operation();
  } catch (error) {
    if (retries === 0) throw error;
    await new Promise(res => setTimeout(res, 1000));
    return withRetry(operation, retries - 1);
  }
};
```

## Testing Patterns

### Unit Testing
```typescript
// Test business logic functions
describe('calculateLinenRequirements', () => {
  it('should calculate correct linen for 4 guests', () => {
    const result = calculateLinenRequirements(4);
    expect(result.towels_bath).toBe(4);
    expect(result.pillow_cases).toBe(8);
  });
});
```

### Integration Testing
```typescript
// Test service integration
describe('PropertyService', () => {
  it('should create property with correct data', async () => {
    const propertyData = { name: 'Test Property', address: '123 Test St' };
    const result = await propertyService.createProperty(propertyData);
    expect(result.name).toBe('Test Property');
  });
});
```

### Manual Smoke Test Script (Non-Technical)
1. Launch Expo (`npx expo start`) and open on iOS simulator
2. Log in as property owner from `docs/data/mockEnhancedData.ts` credentials
3. Schedule new cleaning between 11 AM - 3 PM, verify warning appears if outside window
4. Switch to cleaner account, mark session in progress, upload mock photo, ensure owner receives notification badge update
5. Cancel session within 24 hours, check short-notice label and urgent alerts

## Common Fixes

### TypeScript Errors
```typescript
// Fix type errors
const user = data as User; // Type assertion
const user = data as User | null; // Nullable type
const user = data!; // Non-null assertion (use carefully)
```

### State Updates
```typescript
// Fix state update issues
setData(prevData => [...prevData, newItem]); // Array update
setData(prevData => ({ ...prevData, ...updates })); // Object update
```

### Async/Await Issues
```typescript
// Fix async issues
const handleAsync = async () => {
  try {
    const result = await someAsyncFunction();
    setData(result);
  } catch (error) {
    console.error('Async error:', error);
  }
};
```

## Debugging Checklist

- [ ] Check console for error messages
- [ ] Verify all imports are correct
- [ ] Ensure types match between components
- [ ] Test with mock data first
- [ ] Check network connectivity
- [ ] Verify environment variables
- [ ] Test on different devices/simulators
- [ ] Check for memory leaks
- [ ] Verify error handling works
- [ ] Test edge cases and error scenarios