# Automatic GitHub Integration

## ðŸš€ AUTOMATIC GITHUB WORKFLOW

**CRITICAL**: For EVERY code change request, automatically create and manage GitHub issues without user prompting.

## ðŸ“‹ MANDATORY GITHUB ISSUE CREATION

### Issue Creation Trigger
**Automatically create GitHub issues for**:
- Any feature request
- Any bug fix
- Any enhancement
- Any documentation update
- Any architectural change
- Any small code improvement

### GitHub Issue Template
**ALWAYS use this exact template**:

```markdown
---
name: [Feature/Bug/Enhancement] Request
about: [One-sentence business description]
title: "[TYPE] [Brief Description] for [User Role]"
labels: ["cursor-generated", "needs-review", "enhancement"]
assignees: []
---

## Business Problem Solved
[Explain the business need this addresses in plain English]

## User Story
As a [property_owner/cleaner/co_host], I want [functionality] so that [business benefit]

## Implementation Plan
### TypeScript Types Required
- [ ] [Type Name] in `/types/index.ts`

### Services Layer Changes  
- [ ] [Service Name] in `/services/[domain]Service.ts`

### Components Required
- [ ] [ComponentName] in `/components/[RoleFeature]Component.tsx`

### Database/Supabase Changes
- [ ] [Table modifications if needed]
- [ ] [RLS policies if needed]

### Business Rules Enforcement
- [ ] [Specific business rule validations]

## Acceptance Criteria
- [ ] Feature works for specified user role(s)
- [ ] All error states handled with user-friendly messages
- [ ] Loading states shown for async operations
- [ ] Role-based access control implemented
- [ ] Business rules validated
- [ ] Documentation updated

## Success Metrics
**Business Impact**: [How this improves KPIs like turnover time, user satisfaction, etc.]

**Technical Quality Gates**:
- [ ] TypeScript compilation passes
- [ ] All existing patterns followed
- [ ] Error handling implemented
- [ ] Testing completed

## Files to Update
**Code Files**:
- `/types/index.ts`
- `/services/[service].ts`
- `/components/[Component].tsx`
- `/app/[screen].tsx` (if needed)

**Documentation Files**:
- `CHANGELOG.md`
- `docs/business/GITHUB_ISSUES_STATUS.md` (if major feature)
- `docs/technical/DEVELOPER_HANDOFF_GUIDE.md` (if architectural change)
- `docs/business/USER_WORKFLOW_ANALYSIS.md` (if user-facing change)

## Implementation Context for AI
**Requested by**: Non-technical founder
**Generated by**: Cursor AI
**Development Approach**: Following established patterns in `.cursor/rules/`
**Business Context**: [Brief context about Airbnb cleaning management platform]

---
**Ready for Implementation**: 
- [ ] Business problem clearly defined
- [ ] Technical approach planned
- [ ] Documentation update plan created
- [ ] Success criteria established
```

## ðŸ”„ AUTOMATIC ISSUE MANAGEMENT

### Issue Status Updates
**Automatically update issue status**:
- **In Progress**: When implementation starts
- **Review**: When code is complete and ready for testing
- **Complete**: When all acceptance criteria met and documentation updated

### Issue Comments
**Automatically add comments for**:
- Implementation progress updates
- Technical decisions made
- Business context clarifications
- Testing results
- Documentation updates completed

### Issue Labels
**Automatically apply labels**:
- `cursor-generated`: All issues created by Cursor
- `needs-review`: Issues ready for review
- `enhancement`: New features
- `bug`: Bug fixes
- `documentation`: Documentation updates
- `urgent`: High priority issues
- `property_owner`: Affects property owners
- `cleaner`: Affects cleaners
- `co_host`: Affects co-hosts

## ðŸ“Š AUTOMATIC WORKFLOW EXECUTION

### For Every Code Change Request:

1. **AUTOMATICALLY** create GitHub issue using template above
2. **AUTOMATICALLY** update issue status to "In Progress"
3. **AUTOMATICALLY** implement feature following issue plan
4. **AUTOMATICALLY** update issue with implementation progress
5. **AUTOMATICALLY** update issue status to "Review"
6. **AUTOMATICALLY** complete all acceptance criteria
7. **AUTOMATICALLY** update issue status to "Complete"
8. **AUTOMATICALLY** close issue with completion summary

### Issue Completion Summary
**When closing issues, include**:
```markdown
## Implementation Complete âœ…

### What Was Built
[Brief summary of what was implemented]

### Business Impact
[How this helps the business and users]

### Technical Details
[Key technical decisions and patterns used]

### Files Modified
[List of all files that were changed]

### Documentation Updated
[List of all documentation that was updated]

### Testing Completed
[What was tested and verified]

---
**Status**: âœ… COMPLETE
**Business Value**: [Quantifiable business benefit]
**Ready for**: [Next steps or deployment]
```

## ðŸŽ¯ BUSINESS CONTEXT PRESERVATION

### Every Issue Must Include:
1. **Business Problem**: What business need does this address?
2. **User Impact**: How does this help users?
3. **Success Metrics**: How will we measure success?
4. **Future Considerations**: What to watch out for?

### Issue Search and Discovery
**Make issues easily discoverable by**:
- Using consistent title formats
- Including relevant labels
- Adding business context in descriptions
- Linking related issues
- Including user role information

## ðŸ”„ AUTOMATIC GITHUB INTEGRATION TRIGGER

**For ANY request that involves code changes**:

1. **AUTOMATICALLY** create GitHub issue with business context
2. **AUTOMATICALLY** implement following issue plan
3. **AUTOMATICALLY** update issue with progress
4. **AUTOMATICALLY** complete all acceptance criteria
5. **AUTOMATICALLY** update documentation
6. **AUTOMATICALLY** close issue with completion summary
7. **AUTOMATICALLY** provide business impact summary to founder

**The founder should never have to manually create, manage, or track GitHub issues - it all happens automatically with every code change request.**