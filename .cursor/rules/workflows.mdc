---
alwaysApply: true
---
# Developer Workflows & Commands

## üöÄ Critical Commands (Not Obvious from Files)

### Development Startup
```bash
npm start                    # Start Expo dev server (Metro bundler)
# Then press:
# - 'a' for Android emulator
# - 'i' for iOS simulator  
# - 'w' for web browser
# - 'r' to reload app
# - 'c' to clear cache

npm run dev:clean           # Nuclear option - clears all caches
```

**When to use dev:clean**: If you see weird errors, stale data, or "something worked yesterday"

### Type Checking & Linting
```bash
npm run lint                # Runs TypeScript compiler (npx tsc --noEmit)
npm run type-check          # Same as lint (explicit alias)
```

**Important**: There's NO ESLint in this project (intentionally simple). Type checking is the only "lint".

### Testing
```bash
npm test                    # Run Jest tests
npm run test:watch          # Watch mode (re-run on file change)
npm run test:coverage       # Coverage report
```

**Current State**: Minimal test coverage (1 test file). Manual testing is primary.

### Documentation Maintenance
```bash
npm run docs:update         # Regenerates component/service manifests
npm run docs:validate       # Checks docs are in sync with code
npm run docs:precheck       # Validates before doc operations
```

**When to run**: After adding new component, service, or screen

### Build & Deploy
```bash
npm run build               # Build for web (expo export)
npm run doctor              # Diagnose Expo configuration issues
```

## üîç Debugging Workflows

### When App Won't Start
```bash
# Step 1: Clear everything
npm run dev:clean

# Step 2: If that fails, nuclear option
rm -rf node_modules
npm install
npm start
```

### When TypeScript Errors Are Confusing
```bash
# Check what TypeScript sees
npx tsc --noEmit --listFiles | grep "your-file-name"

# Generate type definitions from Supabase
# (Manual process - not scripted yet)
```

### When Real-time Updates Stop Working
1. Check browser console for WebSocket errors
2. Verify Supabase connection: `utils/supabase.ts`
3. Check if channel is properly subscribed in `realtimeService.ts`
4. Look for unsubscribe calls that shouldn't happen

### When Photos Won't Upload
1. Check Supabase Storage permissions (RLS policies)
2. Verify environment variables are set
3. Check network tab for 401/403 errors
4. Validate photo size < 5MB

## üèóÔ∏è Feature Development Workflow

### Standard Process
1. **Define types** in `types/index.ts`
2. **Create service** in `services/newFeatureService.ts`
3. **Build component** in `components/FeatureComponent.tsx`
4. **Add to screen** in `app/feature-screen.tsx`
5. **Test manually** with `npm start`
6. **Update docs** with `npm run docs:update`

### Integration Testing (Manual)
Since we don't have automated integration tests:
1. Test each user role (property_owner, cleaner, co_host)
2. Test with demo mode (no Supabase)
3. Test with real Supabase connection
4. Test on iOS simulator
5. Test on Android emulator
6. Test in web browser
7. Test edge cases (empty states, errors, network failure)

## üìù Git Workflow Patterns

### Commit Message Format
```
[TYPE]: Brief description (affects: user_role)

- Specific change 1
- Specific change 2  
- Business impact

Docs updated: file1.md, file2.md
```

**Types**: FEATURE, FIX, REFACTOR, DOCS, PERF, SETUP

### Branch Strategy
```bash
main                        # Production-ready code
feature/description         # New features
fix/description            # Bug fixes
docs/description           # Documentation only
```

**Note**: Project currently on `main` branch - no complex branching yet

## üêõ Common Issues & Quick Fixes

### "Cannot find module '@/components/...' "
**Cause**: Path alias not recognized  
**Fix**: Restart TypeScript server (VS Code: Cmd+Shift+P ‚Üí "Restart TS Server")

### "Invariant Violation: requireNativeComponent: RNCWebView was not found"
**Cause**: Native module needs rebuild  
**Fix**: 
```bash
npx expo prebuild --clean
npm start
```

### "Supabase client error: Invalid API key"
**Cause**: Environment variables not loaded or wrong  
**Fix**: Check `.env` file exists and has correct values, restart Metro

### "Cannot read property 'navigate' of undefined"
**Cause**: Using useRouter outside navigation context  
**Fix**: Ensure component is inside _layout.tsx navigation tree

### Photos showing as broken images
**Cause**: Supabase Storage URL generation issue or RLS blocking access  
**Fix**: Check storage bucket is public or has correct RLS policy

## üéØ Project-Specific Conventions

### File Naming
- **Components**: PascalCase with role prefix (CleanerDashboard.tsx)
- **Services**: camelCase with Service suffix (cleaningSessionService.ts)
- **Screens**: lowercase matching route (properties.tsx)
- **Types**: No separate files - all in types/index.ts
- **Utils**: camelCase (supabase.ts)

### Import Order (Not Enforced, But Preferred)
```typescript
// 1. React & React Native
import React, { useState } from 'react';
import { View, Text } from 'react-native';

// 2. Third-party libraries
import { Ionicons } from '@expo/vector-icons';

// 3. Internal imports (@ alias)
import { CleaningSession } from '@/types';
import { cleaningSessionService } from '@/services';
import ComponentName from '@/components/ComponentName';

// 4. Relative imports (avoid if possible)
import { localHelper } from './helpers';
```

### Comment Style
```typescript
// Brief explanatory comments only (not JSDoc)
// Focus on WHY, not WHAT (code shows what)

// ‚ùå Bad: Gets the user data
// ‚úÖ Good: Uses cached data to avoid API rate limits
```

## üìö Documentation as Source of Truth

### When Code and Docs Conflict
1. Check `docs/phase-tracking/PHASE_STATUS.md` for current priority
2. Check feature spec in `docs/features/[name].md` for requirements
3. If docs say X and code does Y ‚Üí flag to user: "Docs show X, code does Y"

### After Implementing Feature
Update these docs:
- `docs/manifests/COMPONENTS.md` (if new component)
- `docs/manifests/SERVICES.md` (if new service)
- `docs/manifests/SCREENS.md` (if new screen)
- `docs/phase-tracking/PHASE_STATUS.md` (mark complete)

## üîß Environment Setup

### Required Environment Variables
```bash
EXPO_PUBLIC_SUPABASE_URL=https://xyz.supabase.co
EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbG...
```

### Optional (Demo Mode Works Without)
If not set ‚Üí app uses mock data from `data/mockProfiles.ts` and `data/mockData.ts`

**Demo Mode Detection**:
```typescript
import { isDemoMode } from '@/utils/supabase';
if (isDemoMode()) {
  // Use mock data
}
```

## üé® Design System Enforcement

### Colors (Use Exactly)
```typescript
primary: '#007AFF'
success: '#10b981'
warning: '#f59e0b'
error: '#ef4444'
```

### Spacing (Use Exactly)
```typescript
xs: 4, sm: 8, md: 12, lg: 16, xl: 24, xxl: 32
```

**No magic numbers**: Always use design system values
