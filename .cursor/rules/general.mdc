---
description: "General coding standards and best practices for this project"
alwaysApply: true
---

# General Coding Standards

## TypeScript Requirements

**ALWAYS use TypeScript with strict mode** - No `any` types allowed. Use proper interfaces and type definitions.

```typescript
// ✅ Good
interface User {
  id: string;
  email: string;
  name: string;
}

// ❌ Bad
const user: any = { ... };
```

## Form Handling

**ALWAYS use react-hook-form + zod** - No exceptions. Never use uncontrolled forms or manual validation.

```typescript
// ✅ Required pattern
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const schema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

const { control, handleSubmit } = useForm({
  resolver: zodResolver(schema),
});
```

## Data Validation

**ALWAYS use zod schemas** for all data validation, API responses, and form validation.

```typescript
// ✅ Required for all data
const userSchema = z.object({
  id: z.string().uuid(),
  email: z.string().email(),
  createdAt: z.string().datetime(),
});

type User = z.infer<typeof userSchema>;
```

## List Performance

**Use @shopify/flash-list for lists with >10 items** - NEVER use FlatList for performance reasons.

```typescript
// ✅ Required for long lists
import { FlashList } from '@shopify/flash-list';

function ItemList({ data }) {
  return (
    <FlashList
      data={data}
      renderItem={({ item }) => <ItemCard item={item} />}
      estimatedItemSize={80}
    />
  );
}

// ❌ Never use FlatList
import { FlatList } from 'react-native';
```

## State Management

**Use TanStack Query for all server state** - API calls, caching, mutations.

```typescript
// ✅ Required pattern
import { useQuery, useMutation } from '@tanstack/react-query';

function useUser(userId: string) {
  return useQuery({
    queryKey: ['user', userId],
    queryFn: () => fetchUser(userId),
  });
}
```

**Use Zustand for global client state** - Not Redux or Context for simple state.

```typescript
// ✅ Preferred for global state
import { create } from 'zustand';

interface AppStore {
  theme: 'light' | 'dark';
  setTheme: (theme: 'light' | 'dark') => void;
}

export const useAppStore = create<AppStore>((set) => ({
  theme: 'light',
  setTheme: (theme) => set({ theme }),
}));
```

## Security Standards

**Use expo-secure-store for sensitive data** - Tokens, credentials, API keys.

```typescript
// ✅ Required for sensitive data
import * as SecureStore from 'expo-secure-store';

export async function storeToken(key: string, value: string) {
  await SecureStore.setItemAsync(key, value);
}
```

**Use MMKV for non-sensitive high-performance storage** - User preferences, cache data.

```typescript
// ✅ For non-sensitive data
import { MMKV } from 'react-native-mmkv';

export const storage = new MMKV({
  id: 'app-storage',
});
```

## Error Handling

**Handle errors at function boundaries** - Use early returns, avoid deeply nested if statements.

```typescript
// ✅ Good error handling
async function fetchUser(userId: string) {
  if (!userId) {
    throw new Error('User ID is required');
  }

  const response = await api.get(`/users/${userId}`);

  if (!response.ok) {
    throw new Error('Failed to fetch user');
  }

  return response.data;
}

// ❌ Bad - deeply nested
async function fetchUser(userId: string) {
  if (userId) {
    const response = await api.get(`/users/${userId}`);
    if (response.ok) {
      return response.data;
    } else {
      // handle error
    }
  } else {
    // handle error
  }
}
```

## Performance Standards

**Memoize expensive components** - Use React.memo, useCallback, useMemo appropriately.

```typescript
// ✅ Memoize expensive components
const ExpensiveComponent = memo(({ data }) => {
  const processedData = useMemo(() => {
    return data.map(item => expensiveProcessing(item));
  }, [data]);

  return <ComplexUI data={processedData} />;
});

// ✅ Memoize callbacks
const handlePress = useCallback(() => {
  onItemPress(item.id);
}, [item.id, onItemPress]);
```

## Code Quality

**Use descriptive variable names** - Include auxiliary verbs (isLoading, hasError, canSubmit).

```typescript
// ✅ Good naming
const isLoading = true;
const hasError = false;
const canSubmit = !isLoading && !hasError;

// ❌ Bad naming
const loading = true;
const error = false;
const submit = !loading && !error;
```

**Follow functional programming patterns** - Prefer functions over classes, avoid mutations.

```typescript
// ✅ Functional approach
const processUsers = (users: User[]) =>
  users
    .filter(user => user.active)
    .map(user => ({ ...user, displayName: `${user.firstName} ${user.lastName}` }));

// ❌ Imperative approach
const processUsers = (users: User[]) => {
  const result = [];
  for (let i = 0; i < users.length; i++) {
    if (users[i].active) {
      users[i].displayName = `${users[i].firstName} ${users[i].lastName}`;
      result.push(users[i]);
    }
  }
  return result;
};
```

## Testing Requirements

**Write tests for critical paths** - Authentication, data mutations, form validation.

```typescript
// ✅ Required test pattern
import { render, fireEvent } from '@testing-library/react-native';
import { GluestackUIProvider } from '@gluestack-ui/themed';

function renderWithProviders(component) {
  return render(
    <GluestackUIProvider config={config}>
      {component}
    </GluestackUIProvider>
  );
}
```

## Accessibility

**Always provide accessibility props** - Labels, hints, roles for interactive elements.

```typescript
// ✅ Required accessibility
<Button
  accessible={true}
  accessibilityRole="button"
  accessibilityLabel="Save changes"
  accessibilityHint="Tap to save your changes"
>
  <ButtonText>Save</ButtonText>
</Button>
```

## File Organization

**Use named exports** - Prefer named exports over default exports for better tree-shaking.

```typescript
// ✅ Preferred
export const UserCard = ({ user }) => { ... };
export const useUser = (id) => { ... };

// ❌ Avoid
export default UserCard;
```

**Group imports logically** - React, third-party, local imports.

```typescript
// ✅ Good import order
import React from 'react';
import { useForm } from 'react-hook-form';
import { Button, ButtonText } from '@gluestack-ui/themed';
import { useUser } from '../hooks/useUser';
import { UserCard } from '../components/UserCard';
```
