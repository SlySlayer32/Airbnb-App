---
description: Non-technical founder context and communication guidelines
globs: ["**/*"]
alwaysApply: true
---

# Non-Technical Founder Context & Communication

**CRITICAL: The user has ZERO coding experience.** This is a non-technical founder who built an entire Airbnb cleaning management app through AI assistance.

## Communication Rules

- Describe features in business terms, never technical jargon
- Provide complete working code - no TODOs or placeholders
- Explain changes in plain English with business impact
- When errors occur, explain problem and solution simply
- Assume every request needs full implementation (imports, types, error handling)
- Focus on what the feature does for their business, not how it works

## Automatic Workflow Rules

**CRITICAL**: For EVERY code change request, automatically execute the complete GitHub workflow without user prompting:

1. **AUTOMATICALLY** create GitHub issue with business context
2. **AUTOMATICALLY** implement following established patterns
3. **AUTOMATICALLY** update all documentation
4. **AUTOMATICALLY** create proper commit messages
5. **AUTOMATICALLY** create pull requests
6. **AUTOMATICALLY** execute quality assurance checks
7. **AUTOMATICALLY** provide business impact summary

**The founder should never have to ask for documentation, issue creation, or workflow management - it happens automatically.**

## App Business Context

**Airbnb Property Cleaning Management Platform** - Connects property owners with cleaning teams for scheduling, communication, quality control, and workflow management between guest stays.

## User Roles & Capabilities

- **property_owner**: Manages properties, schedules cleanings, handles billing, sets requirements
- **cleaner**: Receives assignments, updates progress, reports issues, accesses property details
- **co_host**: Limited management, coordinates schedules, views reports (no financial access)

## Critical Business Rules

- Cleanings MUST happen between checkout (11 AM) and checkin (3 PM)
- 24-hour cancellation notice required (less = "short notice" flagged red)
- Linen needs scale with guest count (auto-calculated)
- Urgent issues trigger immediate notifications
- Cleaners never see financial data

## Error Communication

When explaining errors to the user:
1. **What went wrong** - in simple business terms
2. **Why it happened** - without technical details
3. **How to fix it** - step by step
4. **How to prevent it** - for future reference

Example:
❌ "The Supabase query failed due to a foreign key constraint violation"
✅ "The system couldn't save the cleaning schedule because the property doesn't exist. Let's add the property first, then schedule the cleaning."

## Feature Implementation Communication

When implementing features:
1. **What it does** - business value and user benefit
2. **Who can use it** - which user roles have access
3. **Where to find it** - navigation and location in app
4. **What to expect** - how it works from user perspective

## Business Impact Focus

Always connect technical changes to business value:
- "This will save cleaners 10 minutes per property by showing all access info upfront"
- "Property owners will get instant notifications when cleaners start work"
- "This prevents double-booking by checking availability before scheduling"

## Role Cheat Sheet

| Role | Daily Goals | Must See | Cannot See | Tone to Use |
| --- | --- | --- | --- | --- |
| property_owner | Keep turnovers smooth, protect ratings | Schedule health, team status, invoices, urgent alerts | Internal cleaner pricing breakdowns | Strategic, data-backed confidence |
| cleaner | Finish assignments quickly, report issues | Property access info, checklist, time targets, upload tools | Any financial metrics or owner-only notes | Clear, step-by-step, action-oriented |
| co_host | Support owners, coordinate team | Schedule overview, maintenance follow-up, guest change notes | Billing controls, team member removal | Collaborative, coordination-focused |

## Founder Alignment Reminders

- Always restate the expected user experience before coding so the founder can confirm or clarify.
- Flag trade-offs upfront (e.g., performance vs. timeline) using business outcomes rather than technical jargon.
- Provide a “What changed / Why it matters / How to verify” summary with every response so the founder has board-ready messaging.