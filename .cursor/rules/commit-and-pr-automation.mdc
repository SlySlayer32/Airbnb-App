# Commit and Pull Request Automation

## ðŸš€ AUTOMATIC VERSION CONTROL WORKFLOW

**CRITICAL**: For EVERY code change, automatically handle commit messages and pull request creation without user prompting.

## ðŸ“‹ MANDATORY COMMIT MESSAGE FORMAT

### Standard Commit Format
**ALWAYS use this exact format**:

```
[TYPE]: [Brief description] (closes #[issue-number])

- Implemented [specific change 1]
- Added [specific change 2]
- Business impact: [how this helps users]

Files updated: [list of files]
Docs updated: [list of documentation files]
```

### Commit Types
- **FEATURE**: New functionality
- **FIX**: Bug fixes  
- **DOCS**: Documentation changes
- **REFACTOR**: Code changes that neither fix bugs nor add features
- **PERF**: Performance improvements
- **ENHANCEMENT**: Improvements to existing features

### Examples of Good Commit Messages
```
FEATURE: Add real-time cleaning notifications (closes #123)

- Implemented Supabase real-time subscriptions for cleaning_sessions
- Added NotificationBadge component with unread count
- Business impact: Property owners get instant updates when cleaners start work

Files updated: services/notificationService.ts, components/NotificationBadge.tsx
Docs updated: CHANGELOG.md, docs/business/USER_WORKFLOW_ANALYSIS.md
```

```
FIX: Resolve linen calculation for large properties (closes #124)

- Fixed guest_count scaling in linen requirements calculation
- Added validation for maximum guest count limits
- Business impact: Prevents over-ordering of linens for large groups

Files updated: services/cleaningSessionService.ts, types/index.ts
Docs updated: CHANGELOG.md
```

## ðŸ”„ AUTOMATIC PULL REQUEST CREATION

### PR Title Format
```
[TYPE]: [Brief description] (closes #[issue-number])
```

### PR Description Template
```markdown
## Summary
[Brief description of what this PR does]

## Business Problem Solved
[Explain the business need this addresses]

## Changes Made
- [Change 1]
- [Change 2]
- [Change 3]

## User Roles Affected
- [x] Property Owner
- [ ] Cleaner
- [ ] Co-Host

## Testing
- [x] Tested with [user role]
- [x] Verified error handling
- [x] Confirmed business rules work
- [x] Checked loading states

## Business Impact
[How this change benefits users and the business]

## Files Changed
**Code Files**:
- [List of code files]

**Documentation Files**:
- [List of documentation files]

## Screenshots/Demo
[If applicable, include screenshots or demo instructions]

---
**Generated by**: Cursor AI
**GitHub Issue**: #[issue-number]
**Business Context**: [Brief context about Airbnb cleaning management platform]
```

## ðŸ“Š AUTOMATIC WORKFLOW EXECUTION

### For Every Code Change:

1. **AUTOMATICALLY** create proper commit message using format above
2. **AUTOMATICALLY** create pull request with detailed description
3. **AUTOMATICALLY** link PR to GitHub issue
4. **AUTOMATICALLY** include business context in PR description
5. **AUTOMATICALLY** update GitHub issue with PR reference
6. **AUTOMATICALLY** verify all files are properly referenced

### Quality Gates for Commits and PRs:

#### Pre-Commit Checklist
- [ ] Commit message follows exact format
- [ ] GitHub issue number referenced
- [ ] Business impact clearly stated
- [ ] All modified files listed
- [ ] Documentation files listed

#### Pre-PR Checklist
- [ ] PR title follows format
- [ ] PR description includes business context
- [ ] All acceptance criteria from issue met
- [ ] Testing completed and documented
- [ ] Business impact clearly explained
- [ ] Files changed properly listed

## ðŸŽ¯ BUSINESS CONTEXT IN VERSION CONTROL

### Every Commit Must Include:
1. **Business Problem**: What business need does this address?
2. **User Impact**: How does this help users?
3. **Success Metrics**: How will we measure success?
4. **Future Considerations**: What to watch out for?

### Every PR Must Include:
1. **Business Summary**: Plain English explanation of what changed
2. **User Workflow**: How this affects user workflows
3. **Testing Notes**: How this was tested
4. **Business Impact**: Quantifiable benefits to the business

## ðŸ”„ AUTOMATIC WORKFLOW TRIGGER

**For ANY request that involves code changes**:

1. **AUTOMATICALLY** create GitHub issue (if not already created)
2. **AUTOMATICALLY** implement the feature following issue plan
3. **AUTOMATICALLY** update all documentation
4. **AUTOMATICALLY** create commit with proper message format
5. **AUTOMATICALLY** create pull request with detailed description
6. **AUTOMATICALLY** link PR to issue and update issue status
7. **AUTOMATICALLY** provide business impact summary to founder

**The founder should never have to manually create commits, PRs, or manage version control - it happens automatically with every code change.**