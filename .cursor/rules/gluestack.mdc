---
description: "Rules for using Gluestack UI components, patterns, and best practices"
globs: ["app/**/*.(ts|tsx)", "components/**/*.(ts|tsx)"]
---

# Gluestack UI Component Rules

## Core Principles

**ALWAYS prefer Gluestack UI components** - This project has migrated from Radix UI to Gluestack UI for universal compatibility (iOS, Android, Web).

**NEVER use Radix UI** - All `@radix-ui/*` packages have been removed. They are web-only and incompatible with React Native.

## Component Philosophy

Gluestack UI provides:
- **Universal**: Same components work on iOS, Android, and Web
- **Accessible**: WCAG 2.1 AA compliant out of the box
- **Composable**: Build complex UIs from simple primitives
- **Type-safe**: Full TypeScript support
- **Themeable**: Comprehensive theming system

## Available Components

### Layout Components
- `Box` - Generic container (like View)
- `VStack` - Vertical stack with spacing
- `HStack` - Horizontal stack with spacing
- `Center` - Centers children
- `Divider` - Visual separator

### Typography
- `Heading` - Heading text (h1-h6)
- `Text` - Body text
- `Link` - Clickable text/links

### Form Controls
- `Input` + `InputField` - Text input
- `Textarea` + `TextareaInput` - Multi-line input
- `Select` - Dropdown picker
- `Checkbox` - Checkbox input
- `Radio` + `RadioGroup` - Radio buttons
- `Switch` - Toggle switch
- `Slider` - Range slider
- `FormControl` - Form field wrapper with labels and errors

### Buttons & Actions
- `Button` + `ButtonText` - Primary action button
- `Pressable` - Custom pressable area
- `FAB` - Floating action button

### Feedback
- `Toast` - Temporary notifications
- `Alert` - Contextual alerts
- `Progress` - Progress indicator
- `Spinner` - Loading spinner
- `Skeleton` - Loading placeholder

### Overlay
- `Modal` - Modal dialog
- `AlertDialog` - Confirmation dialog
- `Popover` - Floating content
- `Tooltip` - Hover information
- `ActionSheet` - Bottom action menu

### Data Display
- `Card` - Content container
- `Badge` - Status indicator
- `Avatar` - User profile image
- `Icon` - Icon component

## Code Patterns

### Modal Pattern
```typescript
import {
  Modal,
  ModalBackdrop,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  ButtonText,
  Heading,
  Text,
} from '@gluestack-ui/themed';

function ConfirmDialog({ isOpen, onClose, onConfirm, title, message }) {
  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <ModalBackdrop />
      <ModalContent>
        <ModalHeader>
          <Heading>{title}</Heading>
        </ModalHeader>
        <ModalBody>
          <Text>{message}</Text>
        </ModalBody>
        <ModalFooter>
          <Button variant="outline" onPress={onClose}>
            <ButtonText>Cancel</ButtonText>
          </Button>
          <Button onPress={onConfirm}>
            <ButtonText>Confirm</ButtonText>
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
}
```

### Form with Validation
```typescript
import { Controller, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  VStack,
  FormControl,
  FormControlLabel,
  FormControlLabelText,
  FormControlError,
  FormControlErrorText,
  Input,
  InputField,
  Button,
  ButtonText,
} from '@gluestack-ui/themed';

const signupSchema = z.object({
  email: z.string().email('Invalid email format'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  name: z.string().min(2, 'Name must be at least 2 characters'),
});

type SignupForm = z.infer<typeof signupSchema>;

function SignupForm() {
  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<SignupForm>({
    resolver: zodResolver(signupSchema),
  });

  const onSubmit = async (data: SignupForm) => {
    // Handle submission
  };

  return (
    <VStack space="lg" className="p-4">
      <Controller
        control={control}
        name="name"
        render={({ field: { onChange, onBlur, value } }) => (
          <FormControl isInvalid={!!errors.name}>
            <FormControlLabel>
              <FormControlLabelText>Name</FormControlLabelText>
            </FormControlLabel>
            <Input>
              <InputField
                value={value}
                onChangeText={onChange}
                onBlur={onBlur}
                placeholder="Enter your name"
              />
            </Input>
            <FormControlError>
              <FormControlErrorText>{errors.name?.message}</FormControlErrorText>
            </FormControlError>
          </FormControl>
        )}
      />

      <Controller
        control={control}
        name="email"
        render={({ field: { onChange, onBlur, value } }) => (
          <FormControl isInvalid={!!errors.email}>
            <FormControlLabel>
              <FormControlLabelText>Email</FormControlLabelText>
            </FormControlLabel>
            <Input>
              <InputField
                value={value}
                onChangeText={onChange}
                onBlur={onBlur}
                placeholder="Enter email"
                keyboardType="email-address"
                autoCapitalize="none"
              />
            </Input>
            <FormControlError>
              <FormControlErrorText>{errors.email?.message}</FormControlErrorText>
            </FormControlError>
          </FormControl>
        )}
      />

      <Controller
        control={control}
        name="password"
        render={({ field: { onChange, onBlur, value } }) => (
          <FormControl isInvalid={!!errors.password}>
            <FormControlLabel>
              <FormControlLabelText>Password</FormControlLabelText>
            </FormControlLabel>
            <Input>
              <InputField
                type="password"
                value={value}
                onChangeText={onChange}
                onBlur={onBlur}
                placeholder="Enter password"
                secureTextEntry
              />
            </Input>
            <FormControlError>
              <FormControlErrorText>{errors.password?.message}</FormControlErrorText>
            </FormControlError>
          </FormControl>
        )}
      />

      <Button
        size="lg"
        onPress={handleSubmit(onSubmit)}
        isDisabled={isSubmitting}
      >
        <ButtonText>{isSubmitting ? 'Creating Account...' : 'Sign Up'}</ButtonText>
      </Button>
    </VStack>
  );
}
```

### Toast Notifications
```typescript
import {
  Toast,
  ToastTitle,
  ToastDescription,
  useToast,
  VStack,
} from '@gluestack-ui/themed';

function useNotification() {
  const toast = useToast();

  const showSuccess = (title: string, description?: string) => {
    toast.show({
      placement: 'top',
      render: ({ id }) => (
        <Toast nativeID={id} action="success" variant="solid">
          <VStack space="xs">
            <ToastTitle>{title}</ToastTitle>
            {description && <ToastDescription>{description}</ToastDescription>}
          </VStack>
        </Toast>
      ),
    });
  };

  const showError = (title: string, description?: string) => {
    toast.show({
      placement: 'top',
      render: ({ id }) => (
        <Toast nativeID={id} action="error" variant="solid">
          <VStack space="xs">
            <ToastTitle>{title}</ToastTitle>
            {description && <ToastDescription>{description}</ToastDescription>}
          </VStack>
        </Toast>
      ),
    });
  };

  return { showSuccess, showError };
}

// Usage
function MyComponent() {
  const { showSuccess, showError } = useNotification();

  const handleSave = async () => {
    try {
      await saveData();
      showSuccess('Saved!', 'Your changes have been saved successfully.');
    } catch (error) {
      showError('Error', 'Failed to save changes. Please try again.');
    }
  };
}
```

## Best Practices

1. **Always use FormControl** for form inputs with proper labels and error states
2. **Use semantic actions** on buttons: `action="primary"`, `action="secondary"`, `action="positive"`, `action="negative"`
3. **Combine with NativeWind** using the `styled` function for additional styling
4. **Use theme tokens** (`$primary500`, `$gray200`, etc.) instead of hardcoded colors
5. **Provide accessibility props** - Gluestack UI handles most automatically, but add labels and hints when needed

## Import Pattern
```typescript
import {
  Button,
  ButtonText,
  VStack,
  HStack,
  Box,
  Text,
  Heading,
  FormControl,
  FormControlLabel,
  FormControlLabelText,
  Input,
  InputField,
} from '@gluestack-ui/themed';
```
