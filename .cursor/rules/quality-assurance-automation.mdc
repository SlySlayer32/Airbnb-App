# Quality Assurance Automation

## ðŸš€ AUTOMATIC QUALITY GATES

**CRITICAL**: For EVERY code change, automatically execute quality assurance checks without user prompting.

## ðŸ“‹ MANDATORY QUALITY CHECKLIST

### Pre-Implementation Quality Gates
**Before writing any code**:
- [ ] GitHub issue created with business context
- [ ] User role clearly identified
- [ ] Business problem clearly stated
- [ ] Success criteria defined
- [ ] Implementation plan outlined
- [ ] All required files identified

### During Implementation Quality Gates
**While writing code**:
- [ ] Follow existing code patterns from `.cursor/rules/`
- [ ] Add meaningful comments explaining business logic
- [ ] Handle all error states with user-friendly messages
- [ ] Implement loading states for async operations
- [ ] Ensure role-based access control using `RoleBasedWrapper`
- [ ] Maintain TypeScript safety (no `any` types)
- [ ] Follow React Native + Expo patterns
- [ ] Use existing Supabase setup and database structure
- [ ] Apply Ionicons for consistency
- [ ] Use existing color scheme and spacing

### Post-Implementation Quality Gates
**After code completion**:
- [ ] TypeScript compilation passes
- [ ] All error states handled
- [ ] Loading states implemented
- [ ] Role-based access control working
- [ ] Business rules enforced
- [ ] Documentation updated
- [ ] GitHub issue updated with implementation details
- [ ] Commit message follows format
- [ ] CHANGELOG.md updated
- [ ] All acceptance criteria met

## ðŸŽ¯ BUSINESS RULE VALIDATION

### Critical Business Rules to Always Enforce
1. **Cleaning Window Constraints**: Cleanings MUST happen between 11 AM - 3 PM
2. **Cancellation Notice Policy**: 24-hour notice required, flag short notice
3. **Linen Requirements Scaling**: Scale with guest count automatically
4. **Urgent Issue Handling**: Immediate notifications for urgent issues
5. **Financial Privacy**: Cleaners never see pricing or financial data

### Role-Based Access Control Validation
- **property_owner**: Full access to properties, billing, team management
- **cleaner**: Access to assigned properties, cleaning tools, progress tracking
- **co_host**: Limited management, no financial access

### Error Handling Validation
- [ ] All async operations have try/catch blocks
- [ ] User-friendly error messages displayed
- [ ] Loading states shown during async operations
- [ ] Empty states handled gracefully
- [ ] Network errors handled appropriately

## ðŸ“Š AUTOMATIC TESTING VALIDATION

### Code Quality Checks
- [ ] No console.log statements in production code
- [ ] All TypeScript types properly defined
- [ ] No hardcoded values (use constants)
- [ ] Responsive design works on different screen sizes
- [ ] Performance optimized (no unnecessary re-renders)

### Business Logic Validation
- [ ] Cleaning window validation works correctly
- [ ] Cancellation notice calculation accurate
- [ ] Linen requirements scale properly
- [ ] Priority levels assigned correctly
- [ ] Status transitions work as expected

### User Experience Validation
- [ ] Intuitive navigation flow
- [ ] Clear visual feedback for all actions
- [ ] Consistent design patterns
- [ ] Accessible to users with different abilities
- [ ] Works on both iOS and Android

## ðŸ”„ AUTOMATIC QUALITY WORKFLOW

### For Every Code Change Request:

1. **AUTOMATICALLY** validate business requirements
2. **AUTOMATICALLY** check user role permissions
3. **AUTOMATICALLY** enforce business rules
4. **AUTOMATICALLY** implement error handling
5. **AUTOMATICALLY** add loading states
6. **AUTOMATICALLY** validate TypeScript types
7. **AUTOMATICALLY** test user workflows
8. **AUTOMATICALLY** verify documentation updates
9. **AUTOMATICALLY** confirm all quality gates passed

### Quality Gate Failure Handling
**If any quality gate fails**:
- [ ] Stop implementation immediately
- [ ] Explain the issue in business terms
- [ ] Provide solution approach
- [ ] Fix the issue before continuing
- [ ] Re-validate all quality gates

## ðŸŽ¯ SUCCESS CRITERIA

### Technical Success
- [ ] Code compiles without errors
- [ ] All tests pass
- [ ] Performance meets requirements
- [ ] Security best practices followed
- [ ] Documentation is complete and accurate

### Business Success
- [ ] Feature solves the stated business problem
- [ ] User experience is intuitive and efficient
- [ ] Business rules are properly enforced
- [ ] Error handling provides clear guidance
- [ ] Feature integrates seamlessly with existing workflows

### Documentation Success
- [ ] All changes documented in CHANGELOG.md
- [ ] GitHub issue updated with completion status
- [ ] Business impact clearly explained
- [ ] Future considerations documented
- [ ] User workflows updated if applicable

## ðŸš¨ AUTOMATIC QUALITY ASSURANCE TRIGGER

**For ANY request that involves code changes**:

1. **AUTOMATICALLY** execute pre-implementation quality gates
2. **AUTOMATICALLY** validate business requirements
3. **AUTOMATICALLY** implement with quality standards
4. **AUTOMATICALLY** execute post-implementation quality gates
5. **AUTOMATICALLY** verify all success criteria met
6. **AUTOMATICALLY** provide quality assurance summary to founder

**The founder should never have to worry about code quality, business rule enforcement, or testing - it all happens automatically with every code change.**