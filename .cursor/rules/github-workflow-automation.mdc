# GitHub Workflow Automation - Automatic Issue & Documentation Management

## üöÄ AUTOMATIC WORKFLOW TRIGGER

**CRITICAL**: For EVERY code change request (features, bugs, enhancements, small fixes), automatically execute this complete workflow without user prompting.

## üìã MANDATORY WORKFLOW STEPS

### Step 1: Automatic GitHub Issue Creation
**ALWAYS create a GitHub issue first** before any code changes:

```markdown
---
name: [Feature/Bug/Enhancement] Request
about: [One-sentence business description]
title: "[TYPE] [Brief Description] for [User Role]"
labels: ["cursor-generated", "needs-review", "enhancement"]
assignees: []
---

## Business Problem Solved
[Explain the business need this addresses in plain English]

## User Story
As a [property_owner/cleaner/co_host], I want [functionality] so that [business benefit]

## Implementation Plan
### TypeScript Types Required
- [ ] [Type Name] in `/types/index.ts`

### Services Layer Changes  
- [ ] [Service Name] in `/services/[domain]Service.ts`

### Components Required
- [ ] [ComponentName] in `/components/[RoleFeature]Component.tsx`

### Database/Supabase Changes
- [ ] [Table modifications if needed]
- [ ] [RLS policies if needed]

## Acceptance Criteria
- [ ] Feature works for specified user role(s)
- [ ] All error states handled with user-friendly messages
- [ ] Loading states shown for async operations
- [ ] Role-based access control implemented
- [ ] Business rules validated
- [ ] Documentation updated

## Business Impact
[How this improves KPIs like turnover time, user satisfaction, etc.]

## Files to Update
**Code Files**:
- [List all files that will be modified]

**Documentation Files**:
- `CHANGELOG.md`
- [Other relevant docs]

---
**Generated by**: Cursor AI
**Business Context**: [Brief context about Airbnb cleaning management platform]
```

### Step 2: Implementation with Documentation
**During code implementation**:
- Follow existing patterns in `.cursor/rules/`
- Add meaningful comments explaining business logic
- Handle all error states with user-friendly messages
- Implement loading states for async operations
- Ensure role-based access control

### Step 3: Automatic Documentation Updates
**ALWAYS update these files** after implementation:

#### CHANGELOG.md Entry
```markdown
### üöÄ **[Feature Name] - [Date]**

#### üì± New Features (if applicable)
- **[Feature Name]**: [Business description and user value]

#### üêõ Fixed Issues (if applicable)  
- **[Issue Description]**: [How it was resolved and business impact]

#### üîß Technical Improvements (if applicable)
- **[Improvement Name]**: [What changed and why it matters]

**Business Impact**: [How this change benefits users and the business]

**GitHub Issue**: #[issue-number]
**Files Modified**: [List of key files]
```

#### Update Relevant Documentation
- Update `docs/business/GITHUB_ISSUES_STATUS.md` if applicable
- Update `docs/technical/DEVELOPER_HANDOFF_GUIDE.md` if major changes
- Update any workflow documentation if user flows changed

### Step 4: Commit Message with Issue Reference
**ALWAYS use this commit format**:
```
[TYPE]: [Brief description] (closes #[issue-number])

- Implemented [specific change 1]
- Added [specific change 2] 
- Business impact: [how this helps users]

Files updated: [list of files]
Docs updated: [list of documentation files]
```

**Types**: FEATURE, FIX, DOCS, REFACTOR, PERF

### Step 5: Automatic Commit Execution
**ALWAYS execute the commit automatically**:
- Use the prepared commit message format above
- Include all modified files in the commit
- Reference the GitHub issue number
- Ensure all changes are staged and committed
- Provide commit confirmation to founder

### Step 6: Quality Assurance Checklist
**Before completing**, verify:
- [ ] TypeScript compilation passes
- [ ] All error states handled
- [ ] Loading states implemented
- [ ] Role-based access control working
- [ ] Business rules enforced
- [ ] Documentation updated
- [ ] GitHub issue updated with implementation details
- [ ] Commit message follows format
- [ ] CHANGELOG.md updated

## üéØ BUSINESS CONTEXT PRESERVATION

### For Every Request, Include:
1. **Business Problem**: What business need does this address?
2. **User Role**: Which user role(s) benefit from this?
3. **Success Metrics**: How will we measure success?
4. **Future Considerations**: What to watch out for?

### Conversation Context Template
```markdown
## Implementation Context
**Date**: [Current Date]
**Requested by**: Non-technical founder via natural language
**Business Goal**: [Restate in business terms]
**User Role Affected**: [property_owner/cleaner/co_host]
**Files Modified**: [List of key files]
**Business Metric Impacted**: [e.g., turnover time, cancellation rate]

### Business Problem Solved
[Explain the business need this addresses]

### Technical Approach  
[How was this implemented - key decisions and patterns used]

### Future Considerations
[What to watch out for, potential improvements, or next steps]

### Testing Notes
[How this was tested and what to verify in future changes]
```

## üö® QUALITY GATES

### Pre-Implementation
- [ ] GitHub issue created with business context
- [ ] User role clearly identified
- [ ] Business problem clearly stated
- [ ] Success criteria defined
- [ ] Implementation plan outlined

### During Implementation
- [ ] Follow existing code patterns
- [ ] Add meaningful comments explaining business logic
- [ ] Handle all error states
- [ ] Test with different user roles
- [ ] Maintain TypeScript safety

### Post-Implementation
- [ ] Update CHANGELOG.md
- [ ] Update relevant documentation
- [ ] Test the feature thoroughly
- [ ] Update GitHub issue with completion status
- [ ] Create proper commit message
- [ ] Summarize business impact for founder

## üìä SUCCESS CRITERIA

This automated workflow succeeds when:
1. **Every code change generates a proper GitHub issue** with implementation plan
2. **Documentation stays synchronized** between GitHub and codebase
3. **Business context is preserved** for future AI development sessions
4. **Non-technical founder gets plain English explanations** of what changed
5. **Development velocity stays high** while maintaining documentation quality
6. **Zero manual intervention** required from the founder

## üîÑ WORKFLOW EXECUTION

**For ANY request that involves code changes**:
1. **AUTOMATICALLY** create GitHub issue using template above
2. **AUTOMATICALLY** implement following the issue plan
3. **AUTOMATICALLY** update all documentation
4. **AUTOMATICALLY** create proper commit message
5. **AUTOMATICALLY** execute the commit using the prepared message
6. **AUTOMATICALLY** create pull request with detailed description
7. **AUTOMATICALLY** update GitHub issue with completion status
8. **AUTOMATICALLY** provide business impact summary to founder

**The founder should never have to ask for documentation, issue creation, or workflow management - it happens automatically.**

## üö® MANUAL COMMIT INSTRUCTIONS (When Git Operations Fail)

**If git operations fail due to disk space or other issues**:

1. **Provide the exact commit command** for the founder to run manually
2. **Include the complete commit message** in the proper format
3. **List all files that need to be committed**
4. **Provide step-by-step instructions** for manual execution

**Example Manual Commit Instructions**:
```bash
# Navigate to project directory
cd "E:\Airbnb App"

# Add all modified files
git add .

# Commit with proper message
git commit -m "FEATURE: [Description] (closes #[issue-number])

- Implemented [specific change 1]
- Added [specific change 2]
- Business impact: [how this helps users]

Files updated: [list of files]
Docs updated: [list of documentation files]"

# Push to remote (if applicable)
git push origin main
```