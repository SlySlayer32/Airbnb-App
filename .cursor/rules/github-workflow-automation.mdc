# GitHub Workflow Automation Rules

## Automatic Issue and PR Creation

When the user asks to "Create or review an issue and create a related PR with the code changes following the github workflow", automatically execute the complete workflow:

### Step 1: Create GitHub Issue
**ALWAYS create a GitHub issue first** using the appropriate template:

#### For Feature Requests:
- Use `.github/ISSUE_TEMPLATE/feature_request.md`
- Title format: `[FEATURE] [Brief Description] for [User Role]`
- Labels: `cursor-generated`, `enhancement`, `needs-review`

#### For Bug Reports:
- Use `.github/ISSUE_TEMPLATE/bug_report.md`
- Title format: `[BUG] [Component] - [Brief Description]`
- Labels: `cursor-generated`, `bug`, `needs-review`

### Step 2: Implement Code Changes
**ALWAYS implement the requested changes** following existing patterns:
- Follow TypeScript patterns in `/types/index.ts`
- Use service layer patterns in `/services/`
- Follow component patterns in `/components/`
- Apply role-based access control using `RoleBasedWrapper`
- Handle all error states with user-friendly messages
- Include loading states for async operations

### Step 3: Update Documentation
**ALWAYS update documentation** after implementation:
- Update `CHANGELOG.md` with business impact
- Update relevant documentation files as needed
- Include business context and user benefits

### Step 4: Create Pull Request
**ALWAYS create a pull request** using the template:
- Use `.github/pull_request_template.md`
- Title format: `[TYPE] [Brief Description] (closes #[issue-number])`
- Link to the GitHub issue created in Step 1
- Include business impact and technical details

### Step 5: Commit Changes
**ALWAYS commit with proper message format**:
```
[TYPE]: [Brief description] (closes #[issue-number])

- Implemented [specific change 1]
- Added [specific change 2] 
- Business impact: [how this helps users]

Files updated: [list of files]
Docs updated: [list of documentation files]
```

## Quality Gates

### Before Creating Issue:
- [ ] Business problem clearly defined
- [ ] User role identified
- [ ] Success criteria established
- [ ] Implementation approach planned

### Before Implementing Code:
- [ ] Issue created with proper template
- [ ] Business context documented
- [ ] Technical approach planned
- [ ] Files to modify identified

### Before Creating PR:
- [ ] Code implementation complete
- [ ] All error states handled
- [ ] Loading states implemented
- [ ] Documentation updated
- [ ] Testing completed

### Before Committing:
- [ ] TypeScript compilation passes
- [ ] All patterns followed
- [ ] Business impact documented
- [ ] Issue number referenced

## Business Context Preservation

### Every Issue Must Include:
1. **Business Problem**: What business need does this address?
2. **User Impact**: How does this help users?
3. **Success Metrics**: How will we measure success?
4. **Implementation Plan**: Technical approach

### Every PR Must Include:
1. **Business Goal**: What problem this solves
2. **User Roles Affected**: Who benefits
3. **Business Value**: Quantifiable benefits
4. **Technical Details**: Key changes made

## Automatic Workflow Execution

**For ANY request involving code changes**:

1. **AUTOMATICALLY** create GitHub issue with business context
2. **AUTOMATICALLY** implement following issue plan
3. **AUTOMATICALLY** update all documentation
4. **AUTOMATICALLY** create pull request with detailed description
5. **AUTOMATICALLY** commit with proper message format
6. **AUTOMATICALLY** link PR to issue
7. **AUTOMATICALLY** provide business impact summary

**The founder should never have to manually create issues, PRs, or manage version control - it all happens automatically.**

## Success Criteria

This automated workflow succeeds when:
1. **Every code change generates a proper GitHub issue** with implementation plan
2. **Documentation stays synchronized** between GitHub and codebase
3. **Business context is preserved** for future development
4. **Non-technical founder gets plain English explanations** of what changed
5. **Zero manual intervention** required from the founder
6. **All templates work without description/auto-attachment issues**