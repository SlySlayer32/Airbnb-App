---
description: GitHub issue creation and workflow integration for Cursor
globs: ["**/*"]
alwaysApply: false
---

# GitHub Issue Creation & Workflow Integration

## For Non-Technical Founder Requests

When the user asks for a new feature, enhancement, or major change, **automatically create a GitHub issue** along with the implementation to maintain their documentation workflow.

### Issue Creation Triggers

Create GitHub issues when user requests:
- "Add [feature]..."
- "I need [functionality]..."
- "Can you create [enhancement]..."
- "Build [new capability]..."
- Any request that will result in significant code changes

### GitHub Issue Template Format

```markdown
---
name: Feature Request - [Feature Name]
about: [One-sentence description of what this does for the business]
title: "[FEATURE] [Feature Name] for [User Role]"
labels: ["enhancement", "cursor-generated", "needs-review"]
assignees: []
---

## Feature Summary

[Clear summary of the requested feature]

## Business Problem Solved

[Explain what business problem this solves and why it's needed]

## User Roles Affected

- [x] Property Owner
- [ ] Cleaner
- [ ] Co-Host

## Implementation Plan

### TypeScript Types Required
- [ ] [Type Name] in `/types/index.ts`
- [ ] [Component Props interfaces]

### Services Layer Changes
- [ ] [Service Name] in `/services/[domain]Service.ts`
- [ ] [Specific methods needed]

### Components Required
- [ ] [ComponentName] in `/components/[RoleFeature]Component.tsx`
- [ ] [Screen updates if needed]

### Database/Supabase Changes
- [ ] [Table modifications if needed]
- [ ] [RLS policies if needed]

### Business Rules Enforcement
- [ ] [Specific business rule validations]

## Acceptance Criteria

- [ ] Feature works for specified user role(s)
- [ ] All error states handled with user-friendly messages
- [ ] Loading states shown for async operations
- [ ] Role-based access control implemented
- [ ] Business rules validated
- [ ] Documentation updated

## Success Metrics

**Business Impact**: [How this improves KPIs like turnover time, user satisfaction, etc.]

**Technical Quality Gates**:
- [ ] TypeScript compilation passes
- [ ] All existing patterns followed
- [ ] Error handling implemented
- [ ] Testing completed

## Files to Update

**Code Files**:
- `/types/index.ts`
- `/services/[service].ts`
- `/components/[Component].tsx`
- `/app/[screen].tsx` (if needed)

**Documentation Files**:
- `CHANGELOG.md`
- `COMPLETE_PRODUCT_ROADMAP.md` (if roadmap item)
- `USER_WORKFLOW_ANALYSIS.md` (if workflow change)
- `INTERACTIVE_TESTING_RESULTS.md` (testing results)

## Implementation Context for AI

**Requested by**: Non-technical founder
**Generated by**: Cursor AI
**Development Approach**: Following established patterns in `.cursor/rules/`
**Business Context**: [Brief context about how this fits the Airbnb cleaning management platform]

---

**Ready for Implementation**: 
- [ ] Business problem clearly defined
- [ ] Technical approach planned
- [ ] Documentation update plan created
- [ ] Success criteria established
```

## Workflow Integration

### When Creating Features

1. **Generate GitHub Issue** using the template above
2. **Implement the feature** following the established patterns
3. **Update documentation** per the issue checklist
4. **Create commit** referencing the issue number
5. **Summarize business impact** in plain English for founder

### Commit Message Format with Issue Reference

```
FEATURE: [Brief description] (closes #[issue-number])

- Implemented [specific change 1]
- Added [specific change 2]
- Business impact: [how this helps users]

Files updated: [list of files]
Docs updated: [list of documentation files]
```

## Documentation Sync Workflow

### Before Implementation
- Create comprehensive GitHub issue with implementation plan
- Confirm business requirements with founder
- Plan documentation updates

### During Implementation
- Follow patterns in `.cursor/rules/`
- Maintain code quality standards
- Document technical decisions

### After Implementation
- Update all documentation per issue checklist
- Test thoroughly for user experience
- Summarize business impact for founder

## GitHub Issue Creation Helper

When user requests a feature, use this structure:

```markdown
I'll create a GitHub issue to track this feature request and then implement it for you.

**Business Goal**: [Restate what they want in business terms]
**User Role**: [Who this is for]
**Implementation Approach**: [High-level plan]

Creating GitHub issue now...

[Generate issue content using template above]

Now implementing the feature...

[Proceed with implementation following established patterns]
```

## Success Criteria

This workflow succeeds when:
1. **Every feature request generates a proper GitHub issue** with implementation plan
2. **Documentation stays synchronized** between GitHub and Cursor
3. **Business context is preserved** for future AI development sessions
4. **Non-technical founder gets plain English explanations** of what changed
5. **Development velocity stays high** while maintaining documentation quality

## Integration with Existing Workflow

This integrates with the existing `.github/instructions/github-workflow.instructions.md` by:
- Creating issues that follow the same documentation update requirements
- Maintaining the pre-push checklist workflow
- Preserving AI context for future development
- Following the same commit message and documentation standards