---
description: Service layer patterns and business logic
globs: ["services/**/*.ts", "lib/**/*.ts"]
alwaysApply: false
---

# Service Layer Patterns

## Service Creation Rules

- One service per business domain (property, cleaning, notifications)
- All Supabase queries go through services (never direct in components)
- Always handle errors and return typed data
- Include notification triggers for important actions
- Map every service method to the exact Supabase table or RPC name in a leading comment so future updates stay aligned
- Document required filters (e.g., restrict to `team_members.role === 'cleaner'`) to enforce business permissions

## Standard Service Template

```typescript
import { supabase } from '@/lib/supabase';
import { Alert } from 'react-native';
import { SomeType } from '@/types';

export const domainService = {
  // Table: public.table_name
  // RLS: ensures users only see rows tied to their team membership
  async getData(filters?: any): Promise<SomeType[]> {
    try {
      const { data, error } = await supabase
        .from('table_name')
        .select(`
          *,
          related_table (name, other_field)
        `)
        .eq('active', true)
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      return data || [];
      
    } catch (error) {
      console.error('Service error:', error);
      Alert.alert('Error', 'Could not load data. Please check your connection.');
      throw error;
    }
  },

  async createItem(itemData: Omit<SomeType, 'id'>): Promise<SomeType> {
    try {
      // Validate business rules
      if (!itemData.required_field) {
        throw new Error('Required field is missing');
      }

      // Permission guard: only property owners and co-hosts can create
      await ensureRole(['property_owner', 'co_host']);

      const { data, error } = await supabase
        .from('table_name')
        .insert({
          ...itemData,
          created_at: new Date().toISOString()
        })
        .select()
        .single();
      
      if (error) throw error;

      // Trigger notifications if needed
      await this.notifyStakeholders(data);
      
      return data;
      
    } catch (error) {
      console.error('Create error:', error);
      Alert.alert('Error', 'Could not create item. Please try again.');
      throw error;
    }
  },

  async updateItem(id: string, updates: Partial<SomeType>): Promise<SomeType> {
    try {
      await ensureCanEdit(id);
      const { data, error } = await supabase
        .from('table_name')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      return data;
      
    } catch (error) {
      console.error('Update error:', error);
      Alert.alert('Error', 'Could not save changes. Please try again.');
      throw error;
    }
  },

  async deleteItem(id: string): Promise<void> {
    try {
      await ensureCanEdit(id);
      const { error } = await supabase
        .from('table_name')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
      
    } catch (error) {
      console.error('Delete error:', error);
      Alert.alert('Error', 'Could not delete item. Please try again.');
      throw error;
    }
  },

  // Private helper for notifications
  async notifyStakeholders(data: SomeType): Promise<void> {
    // Implementation specific to domain
  }
};
```

## Business Logic Examples

```typescript
// Cancellation notice calculation
const calculateCancellationNotice = (scheduledTime: string): number => {
  const scheduled = new Date(scheduledTime);
  const now = new Date();
  const diffInMs = scheduled.getTime() - now.getTime();
  return Math.max(0, Math.floor(diffInMs / (1000 * 60 * 60)));
};

const categorizeNotice = (noticeHours: number): 'on_time' | 'short_notice' => {
  return noticeHours < 24 ? 'short_notice' : 'on_time';
};

// Linen requirements calculation
const calculateLinenRequirements = (guestCount: number): LinenRequirement => ({
  towels_bath: guestCount,
  towels_hand: guestCount,
  pillow_cases: guestCount * 2,
  kitchen_towels: 2,
  bath_mats: 1,
});
```

## Notification Integration

Always trigger notifications for:
- Session status changes
- Urgent maintenance issues
- Cancellations (especially short notice)
- Completion confirmations

## Error Handling Patterns

```typescript
// Standard error handling
try {
  const result = await someOperation();
  return result;
} catch (error) {
  console.error('Operation failed:', error);
  
  // User-friendly error message
  const userMessage = error.message.includes('network') 
    ? 'Please check your internet connection'
    : 'Something went wrong. Please try again.';
  
  Alert.alert('Error', userMessage);
  throw error;
}
```

## Real-time Integration

```typescript
// Subscribe to real-time updates
const subscribeToUpdates = (callback: (data: any) => void) => {
  const channel = supabase
    .channel('updates')
    .on('postgres_changes', 
      { event: '*', schema: 'public', table: 'table_name' },
      callback
    )
    .subscribe();

  return () => supabase.removeChannel(channel);
};

const subscribeToCleanerProgress = (sessionId: string, callback: (payload: CleaningUpdate) => void) => {
  const channel = supabase
    .channel(`cleaning_updates_${sessionId}`)
    .on('postgres_changes', { event: '*', schema: 'public', table: 'cleaning_updates', filter: `session_id=eq.${sessionId}` }, (payload) => {
      callback(payload.new as CleaningUpdate);
    })
    .subscribe();

  return () => supabase.removeChannel(channel);
};
```

## Transaction Patterns

```typescript
// Multi-table operations with transactions
async createWithRelations(data: any) {
  try {
    const { data: result, error } = await supabase.rpc('create_with_relations', {
      main_data: data.main,
      related_data: data.related
    });
    
    if (error) throw error;
    return result;
  } catch (error) {
    console.error('Transaction failed:', error);
    Alert.alert('Error', 'Could not complete operation. Please try again.');
    throw error;
  }
}
```